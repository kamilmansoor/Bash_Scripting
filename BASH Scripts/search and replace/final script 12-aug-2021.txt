#!/bin/bash
####################
# MAIN FUNCTION ####
####################
function main {
        take_timestamp
        applications_path
}

############################################
## Checking and setting Application Path ###
############################################
function applications_path {
        [[ -d /mnt/user_data/home/master/applications ]] && path='/mnt/user_data/home/master/applications'
        list_applications_name
}

##################################################
### Listing Applications Available In the path ###
##################################################
function list_applications_name {
        list=($(ls -l "$path" | sed 1d | grep -v script | awk '{print $9}')) #getting application dir in list
        length=${#list[@]} #getting length of a list

        for((i=0,j=1;i<$length;i++,j++));       #Loop for listing and checking cms
        do
                [[ "$i" == '0' ]] && echo "List of applications present on this server:" && cms_type=$(check_application_cms) || cms_type=("$cms_type" `check_application_cms`)

                echo -e "$j. Application Name: \e[32m${list[$i]}\e[0m CMS: \e[31m${cms_type[$i]}\e[0m"  #printing Application Name and its CMS Type
        done
        select_application_name
}

#####################################################
### Select Application Number With Check ############
#####################################################
function select_application_name {
        read -e -p "Enter the application associate number: " application_number
        until [ -n "$application_number" ] && [ "$application_number" -eq "$application_number" ] 2>/dev/null && [ "$application_number" -gt '0' ] && [ "$application_number" -le "$length" ]; do        #check for Input
                read -e -p "The provided value is not correct. Please re-enter the application associated number: " application_number
        done
        #application_number--  to get the right application selected- As index starts from 0
        ((application_number--)) && application_name="${list[$application_number]}" && application_name_cms="${cms_type[$application_number]}"
        [[ $application_name_cms == `echo $application_name_cms | egrep 'WORDPRESS|WOOCOMMERCE'` ]] && get_string_details && take_database_credentials && take_database_dump && cms_wordpress
}

#################################################
#### Checking CMS - WORDPRESS | WOOCOMMERCE #####
#################################################
function check_application_cms {
        [[ "$USER" == 'root' ]] && allow='--allow-root'
        wp core is-installed --path="$path/${list[$i]}/public_html" $allow 2>/dev/null; output=$(echo $?)
        [[ $output == 0 ]] && { output1=$(wp plugin list --path="$path/${list[$i]}/public_html" $allow 2>/dev/null | egrep woocommerce | awk '{print $1}') && output2=$(wp plugin list --path="$path/${list[$i]}/public_html" $allow 2>/dev/null | egrep woocommerce | awk '{print $2}') && [[ "$output1" == 'woocommerce' ]] && [[ "$output2" == 'active' ]] && echo WOOCOMMERCE || echo WORDPRESS ; }
}

################################
## FUNCTION TAKING TIMESTAMP ###
################################
function take_timestamp {
        timestamp=$(date +%F-%T)
}


###########################################################################################################
####### Getting Database Credentials from wp-config.php If Application is WORDPRESS OR WOOCOMMERCE ########
###########################################################################################################
function take_database_credentials {
        [[ $application_name_cms == `echo $application_name_cms | egrep 'WORDPRESS|WOOCOMMERCE'` ]] && [[ -f $path/$application_name/public_html/wp-config.php ]] && database_name=$(grep -i "DB_NAME" $path/$application_name/public_html/wp-config.php | awk -F "'" '{print $4}') && [[ $USER != 'root' ]] && { database_user=$(grep -i "DB_USER" $path/$application_name/public_html/wp-config.php | awk -F "'" '{print $4}'); database_password=$(grep -i "DB_PASSWORD" $path/$application_name/public_html/wp-config.php | awk -F "'" '{print $4}'); }
        return 0
}


###########################################################################################
######## Comparing Database and Disk Size &&& If Disk space Available Take Database Dump###
###########################################################################################
function take_database_dump {
        [[ "$USER" == 'root' ]] && { database_user=""; database_password=""; } || { database_user="-u${database_user}";  database_password="-p${database_password}"; }
        db_size=$(mysql $database_user $database_password -e "SELECT table_schema ,ROUND(SUM(data_length + index_length) / 1024 / 1024) \"DB Size in MB\" FROM information_schema.tables  WHERE table_schema='$database_name' GROUP BY table_schema ;" | egrep $database_name | awk '{print $2}')
        disk_size=$(df -mT | grep ext4 | awk '{print $5}')
        [[ $disk_size > $db_size ]] && echo "Creating Database Dump..." && mysqldump $database_user $database_password $database_name > "$path/$application_name/private_html/${application_name}-${database_name}-T-${timestamp}.sql"
        return 0
}

###########################################################
######## Getting Input for OLD and NEW URL ################
###########################################################
function get_string_details {
        read -e -p "Enter current string: " current_string
        read -e -p "Enter new string: " new_string
        while [[ -z $current_string || -z $new_string ]]; do
                [[ -z "$current_string" ]] && read -e -p "The string value is empty. Please re-enter current string: " current_string
                [[ -z "$new_string" ]] && read -e -p "The string value is empty. Please re-enter new string: " new_string
        done
}

##################################
####### Removing Database Dump ###
##################################
function remove_database_dump {
        [[ "$value" == "no" ]] && rm "$path/$application_name/private_html/${application_name}-${database_name}-T-${timestamp}.sql" && echo "Removing Database Dump"|| read -e -p "Wait for the client reply. After client confirmation press (yes) to remove the database backup or (no) to not remove the database backup: " value1
        while [[ "$value1" != `echo "$value1" | egrep "^([y][e][s]|[n][o])$"` || -z "$value1" ]]; do
                [[ "$value" == no ]] && break ### stopping loop if no replacement made
                read -e -p "The provided value is not correct. Press (yes) to remove database backup or (no) to not remove the database backup: " value1
        done
        [[ "$value1" == "yes" ]] && rm "$path/$application_name/private_html/${application_name}-${database_name}-T-${timestamp}.sql" && echo "Database Dump Removed..." || echo "Exiting Script..."
}


########################################################
#### SEARCH AND REPLACE FOR WORDPRESS CMS--- ###########
########################################################
function cms_wordpress {
        [[ "$USER" == 'root' ]] && allow="--allow-root"
        replacements=$(wp search-replace "$current_string" "$new_string" --dry-run --path="$path/$application_name/public_html" $allow | grep Success: | awk '{print $2}')  ### Dry-run and grepping number changes to be made in a variable ###
        [[ "$replacements" > 0 ]] && read -e -p "$replacements can be replace. Press (yes) to replace or (no) to abort replacements:" value ###If Replacement is Greater Than 0 then Prompt for make changes YES or NO

        while [[ "$value" != `echo "$value" | egrep "^([y][e][s]|[n][o])$"` || -z "$value" ]]; do ## check for Input
                [[ $replacements == 0 ]] && echo "Provided String Not Found..." && break ## if current string not found OR replacement=0 then break this loop
                read -e -p "The provided value is not correct. Please re-enter (yes/no): " value
        done
        [[ "$value" == yes ]] && wp search-replace "$current_string" "$new_string" --path="$path/$application_name/public_html" $allow && restore_database_dump && return 0 || remove_database_dump  ### if YES then run wp search-replace && then prompt for Restoring Database Dump### And if NO then Prompt for Removing Database Dump ####
}

########################################################################################################
##### Restoring Database Dump -- This Function will execute after wp search-replace ####################
########################################################################################################
function restore_database_dump {
        read -p "Do you want to restore database. Pres (yes) to restore database or (no) not to restore database: " value3
        while [[ "$value3" != `echo "$value3" | egrep "^([y][e][s]|[n][o])$"` || -z "$value3" ]]; do ###check for input
                read -e -p "The provided value is not correct. Press (yes) to restore database backup or (no) to not restore the database backup:" value3
        done
        [[ "$value3" == "yes" ]] && mysql $database_user $database_password $database_name < "$path/$application_name/private_html/${application_name}-${database_name}-T-${timestamp}.sql" && remove_database_dump && return 0 || remove_database_dump ### if YES then IMPORT DUMP and then Remove Database Dump ### OR If NO then prompt for Removing Database Dump
}

main